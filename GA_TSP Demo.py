import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import csv
import os
import threading
import webbrowser
import tempfile
import folium
from folium import plugins
import src.GA
import src.TSP

class TSPGUI(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("TSP Genetic Algorithm v·ªõi B·∫£n ƒë·ªì V·ªá tinh")
        self.geometry("1200x800")
        self.configure(bg="#ffffff")

        self.city_data = {}  # name -> (lat, lon)
        self.city_vars = {}  # city name -> tk.BooleanVar()
        self.current_route = []  # L∆∞u tr·ªØ l·ªô tr√¨nh hi·ªán t·∫°i
        self.current_coords = []  # L∆∞u tr·ªØ t·ªça ƒë·ªô c·ªßa l·ªô tr√¨nh
        
        # Th√™m bi·∫øn ƒë·ªÉ l∆∞u l·ªô tr√¨nh t·ªët nh·∫•t
        self.best_route = []  # L∆∞u l·ªô tr√¨nh t·ªët nh·∫•t
        self.best_distance = float('inf')  # L∆∞u kho·∫£ng c√°ch t·ªët nh·∫•t

        self.setup_ui()
        self.refresh_file_list()

    def setup_ui(self):
        # T·∫°o main container v·ªõi 2 panel
        main_container = ttk.PanedWindow(self, orient=tk.HORIZONTAL)
        main_container.pack(fill="both", expand=True, padx=5, pady=5)

        # Panel tr√°i: Controls
        left_panel = ttk.Frame(main_container)
        main_container.add(left_panel, weight=1)

        # Panel ph·∫£i: B·∫£n ƒë·ªì
        right_panel = ttk.Frame(main_container)
        main_container.add(right_panel, weight=1)

        # ======= Panel tr√°i: C√°c ƒëi·ªÅu khi·ªÉn =======
        self.setup_left_panel(left_panel)

        # ======= Panel ph·∫£i: B·∫£n ƒë·ªì =======
        self.setup_right_panel(right_panel)

    def setup_left_panel(self, parent):
        # ======= Ph·∫ßn tr√™n c√πng: D·ªØ li·ªáu v√† ch·ªçn th√†nh ph·ªë =======
        top_frame = ttk.Frame(parent)
        top_frame.pack(fill="x", padx=5, pady=5)

        # Khung ch·ªçn file v√† th√†nh ph·ªë b·∫Øt ƒë·∫ßu
        data_frame = ttk.LabelFrame(top_frame, text="D·ªØ li·ªáu")
        data_frame.pack(fill="x", padx=5, pady=5)

        ttk.Label(data_frame, text="Ch·ªçn file CSV:").grid(row=0, column=0, sticky="w", padx=5, pady=5)
        self.file_cb = ttk.Combobox(data_frame, state="readonly", width=25)
        self.file_cb.grid(row=0, column=1, padx=5, pady=5)
        self.file_cb.bind("<<ComboboxSelected>>", self.load_selected_file)

        ttk.Label(data_frame, text="Th√†nh ph·ªë b·∫Øt ƒë·∫ßu:").grid(row=1, column=0, sticky="w", padx=5, pady=5)
        self.start_city_cb = ttk.Combobox(data_frame, state="readonly", width=25)
        self.start_city_cb.grid(row=1, column=1, padx=5, pady=5)
        self.start_city_cb.bind("<<ComboboxSelected>>", self.update_start_city)

        # Khung ch·ªçn th√†nh ph·ªë qua (checkbox)
        city_frame = ttk.LabelFrame(top_frame, text="Ch·ªçn th√†nh ph·ªë mu·ªën ƒëi qua")
        city_frame.pack(fill="both", expand=True, padx=5, pady=5)

        self.city_canvas = tk.Canvas(city_frame, height=150)
        self.city_canvas.pack(side="left", fill="both", expand=True)

        scrollbar = ttk.Scrollbar(city_frame, orient="vertical", command=self.city_canvas.yview)
        scrollbar.pack(side="right", fill="y")

        self.city_canvas.configure(yscrollcommand=scrollbar.set)
        self.city_canvas.bind('<Configure>', lambda e: self.city_canvas.configure(scrollregion=self.city_canvas.bbox("all")))

        self.city_inner_frame = ttk.Frame(self.city_canvas)
        self.city_canvas.create_window((0,0), window=self.city_inner_frame, anchor="nw")

        # N√∫t ch·ªçn t·∫•t c·∫£ / b·ªè ch·ªçn t·∫•t c·∫£
        btn_frame = ttk.Frame(city_frame)
        btn_frame.pack(fill="x", pady=5)
        self.btn_select_all = ttk.Button(btn_frame, text="Ch·ªçn t·∫•t c·∫£", command=self.select_all_cities)
        self.btn_select_all.pack(side="left", padx=5)
        self.btn_deselect_all = ttk.Button(btn_frame, text="B·ªè ch·ªçn t·∫•t c·∫£", command=self.deselect_all_cities)
        self.btn_deselect_all.pack(side="left", padx=5)

        # ======= Ph·∫ßn gi·ªØa: c·∫•u h√¨nh thu·∫≠t to√°n =======
        middle_frame = ttk.LabelFrame(parent, text="C·∫•u h√¨nh thu·∫≠t to√°n di truy·ªÅn")
        middle_frame.pack(fill="x", padx=5, pady=5)

        ttk.Label(middle_frame, text="Thu·∫≠t to√°n ƒë·ªôt bi·∫øn:").grid(row=0, column=0, padx=5, pady=5, sticky="w")
        self.mut_algo_cb = ttk.Combobox(middle_frame, values=['swap', 'scramble', 'inversion', 'insertion'], state='readonly', width=15)
        self.mut_algo_cb.current(0)
        self.mut_algo_cb.grid(row=0, column=1, padx=5, pady=5)

        ttk.Label(middle_frame, text="Thu·∫≠t to√°n lai gh√©p:").grid(row=1, column=0, padx=5, pady=5, sticky="w")
        self.cross_algo_cb = ttk.Combobox(middle_frame, values=['order', 'single_point', 'two_point', 'uniform'], state='readonly', width=15)
        self.cross_algo_cb.current(0)
        self.cross_algo_cb.grid(row=1, column=1, padx=5, pady=5)

        ttk.Label(middle_frame, text="Thu·∫≠t to√°n ch·ªçn l·ªçc:").grid(row=2, column=0, padx=5, pady=5, sticky="w")
        self.sel_algo_cb = ttk.Combobox(middle_frame, values=['elitism', 'tournament', 'rank', 'roulette_wheel'], state='readonly', width=15)
        self.sel_algo_cb.current(0)
        self.sel_algo_cb.grid(row=2, column=1, padx=5, pady=5)

        ttk.Label(middle_frame, text="S·ªë th·∫ø h·ªá:").grid(row=3, column=0, padx=5, pady=5, sticky="w")
        self.gen_entry = ttk.Entry(middle_frame, width=17)
        self.gen_entry.insert(0, "100")
        self.gen_entry.grid(row=3, column=1, padx=5, pady=5)

        ttk.Label(middle_frame, text="K√≠ch th∆∞·ªõc qu·∫ßn th·ªÉ:").grid(row=4, column=0, padx=5, pady=5, sticky="w")
        self.pop_entry = ttk.Entry(middle_frame, width=17)
        self.pop_entry.insert(0, "100")
        self.pop_entry.grid(row=4, column=1, padx=5, pady=5)

        ttk.Label(middle_frame, text="T·ªâ l·ªá ƒë·ªôt bi·∫øn:").grid(row=5, column=0, padx=5, pady=5, sticky="w")
        self.mut_entry = ttk.Entry(middle_frame, width=17)
        self.mut_entry.insert(0, "0.01")
        self.mut_entry.grid(row=5, column=1, padx=5, pady=5)

        # N√∫t ch·∫°y thu·∫≠t to√°n
        self.btn_process = ttk.Button(parent, text="‚ñ∂ Ch·∫°y thu·∫≠t to√°n", command=self.start_process)
        self.btn_process.pack(pady=10, ipadx=10, ipady=5)

        # Progress bar
        self.progress_var = tk.DoubleVar()
        self.progressbar = ttk.Progressbar(parent, variable=self.progress_var, maximum=100)
        self.progressbar.pack(fill="x", padx=10, pady=5)

        # ======= Ph·∫ßn d∆∞·ªõi: k·∫øt qu·∫£ =======
        result_frame = ttk.LabelFrame(parent, text="K·∫øt qu·∫£")
        result_frame.pack(fill="both", expand=True, padx=5, pady=5)

        self.result_text = scrolledtext.ScrolledText(result_frame, wrap=tk.WORD, font=("Consolas", 10), height=8)
        self.result_text.pack(fill="both", expand=True)

        # Status bar
        self.status_var = tk.StringVar(value="S·∫µn s√†ng")
        self.status_label = ttk.Label(parent, textvariable=self.status_var, relief="sunken", anchor="w")
        self.status_label.pack(fill="x", side="bottom")

    def setup_right_panel(self, parent):
        # Khung b·∫£n ƒë·ªì
        map_frame = ttk.LabelFrame(parent, text="B·∫£n ƒë·ªì V·ªá tinh - L·ªô tr√¨nh TSP")
        map_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # N√∫t ƒëi·ªÅu khi·ªÉn b·∫£n ƒë·ªì
        map_control_frame = ttk.Frame(map_frame)
        map_control_frame.pack(fill="x", padx=5, pady=5)

        self.btn_show_map = ttk.Button(map_control_frame, text="üó∫Ô∏è Hi·ªÉn th·ªã b·∫£n ƒë·ªì", command=self.show_map)
        self.btn_show_map.pack(side="left", padx=5)

        self.btn_show_cities = ttk.Button(map_control_frame, text="üìç Hi·ªÉn th·ªã th√†nh ph·ªë", command=self.show_cities_only)
        self.btn_show_cities.pack(side="left", padx=5)

        # Khung hi·ªÉn th·ªã th√¥ng tin b·∫£n ƒë·ªì
        self.map_info_text = scrolledtext.ScrolledText(map_frame, wrap=tk.WORD, font=("Consolas", 9), height=25)
        self.map_info_text.pack(fill="both", expand=True, padx=5, pady=5)

        # Th√™m th√¥ng tin h∆∞·ªõng d·∫´n ban ƒë·∫ßu
        self.map_info_text.insert(tk.END, "üó∫Ô∏è H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG B·∫¢N ƒê·ªí\n")
        self.map_info_text.insert(tk.END, "="*50 + "\n\n")
        self.map_info_text.insert(tk.END, "1. Ch·ªçn file CSV ch·ª©a d·ªØ li·ªáu th√†nh ph·ªë\n")
        self.map_info_text.insert(tk.END, "2. Ch·ªçn th√†nh ph·ªë xu·∫•t ph√°t\n")
        self.map_info_text.insert(tk.END, "3. Ch·ªçn c√°c th√†nh ph·ªë mu·ªën ƒëi qua\n")
        self.map_info_text.insert(tk.END, "4. Nh·∫•n 'Hi·ªÉn th·ªã th√†nh ph·ªë' ƒë·ªÉ xem v·ªã tr√≠ c√°c th√†nh ph·ªë\n")
        self.map_info_text.insert(tk.END, "5. Ch·∫°y thu·∫≠t to√°n ƒë·ªÉ t√¨m l·ªô tr√¨nh t·ªëi ∆∞u\n")
        self.map_info_text.insert(tk.END, "6. Nh·∫•n 'Hi·ªÉn th·ªã b·∫£n ƒë·ªì' ƒë·ªÉ xem l·ªô tr√¨nh tr√™n b·∫£n ƒë·ªì v·ªá tinh\n\n")
        self.map_info_text.insert(tk.END, "üìç B·∫£n ƒë·ªì s·∫Ω m·ªü trong tr√¨nh duy·ªát web c·ªßa b·∫°n\n")
        self.map_info_text.insert(tk.END, "üõ∞Ô∏è S·ª≠ d·ª•ng ·∫£nh v·ªá tinh ch·∫•t l∆∞·ª£ng cao\n")

    def refresh_file_list(self):
        data_folder = "./data"
        if not os.path.exists(data_folder):
            os.makedirs(data_folder)

        csv_files = [f for f in os.listdir(data_folder) if f.endswith(".csv")]
        self.file_cb['values'] = csv_files
        if csv_files:
            self.file_cb.current(0)
            self.load_selected_file()

    def load_selected_file(self, event=None):
        selected_file = self.file_cb.get()
        if not selected_file:
            return

        path = os.path.join("./data", selected_file)
        try:
            with open(path, newline='', encoding="utf-8") as f:
                reader = csv.DictReader(f)
                self.city_data = {}
                for row in reader:
                    if 'province' in row and 'lat' in row and 'lon' in row:
                        try:
                            lat = float(row['lat'])
                            lon = float(row['lon'])
                            self.city_data[row['province']] = (lat, lon)
                        except:
                            continue
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file: {e}")
            return

        cities = list(self.city_data.keys())
        self.start_city_cb['values'] = cities
        if cities:
            self.start_city_cb.current(0)

        # X√≥a checkbox c≈©
        for widget in self.city_inner_frame.winfo_children():
            widget.destroy()
        self.city_vars.clear()

        # T·∫°o checkbox cho t·ª´ng th√†nh ph·ªë
        for city in cities:
            var = tk.BooleanVar(value=False)
            chk = ttk.Checkbutton(self.city_inner_frame, text=city, variable=var)
            chk.pack(anchor="w", padx=5, pady=2)
            self.city_vars[city] = var
            
        # C·∫≠p nh·∫≠t scroll region
        self.city_inner_frame.update_idletasks()
        self.city_canvas.configure(scrollregion=self.city_canvas.bbox("all"))
            
        # T·ª± ƒë·ªông ch·ªçn th√†nh ph·ªë xu·∫•t ph√°t
        self.update_start_city()

        # C·∫≠p nh·∫≠t th√¥ng tin b·∫£n ƒë·ªì
        self.update_map_info()

    def update_start_city(self, event=None):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i checkbox khi ch·ªçn th√†nh ph·ªë xu·∫•t ph√°t"""
        start_city = self.start_city_cb.get()
        if start_city and start_city in self.city_vars:
            # T·ª± ƒë·ªông ch·ªçn th√†nh ph·ªë xu·∫•t ph√°t v√† v√¥ hi·ªáu h√≥a checkbox c·ªßa n√≥
            self.city_vars[start_city].set(True)
            
            # T√¨m v√† v√¥ hi·ªáu h√≥a checkbox c·ªßa th√†nh ph·ªë xu·∫•t ph√°t
            for widget in self.city_inner_frame.winfo_children():
                if isinstance(widget, ttk.Checkbutton) and widget.cget("text") == start_city:
                    widget.config(state="disabled")
                else:
                    widget.config(state="normal")

    def select_all_cities(self):
        """Ch·ªçn t·∫•t c·∫£ c√°c th√†nh ph·ªë tr·ª´ th√†nh ph·ªë xu·∫•t ph√°t (ƒë√£ ƒë∆∞·ª£c ch·ªçn ri√™ng)"""
        for city, var in self.city_vars.items():
            var.set(True)

    def deselect_all_cities(self):
        """B·ªè ch·ªçn t·∫•t c·∫£ c√°c th√†nh ph·ªë tr·ª´ th√†nh ph·ªë xu·∫•t ph√°t"""
        start_city = self.start_city_cb.get()
        for city, var in self.city_vars.items():
            if city != start_city:  # Gi·ªØ nguy√™n th√†nh ph·ªë xu·∫•t ph√°t ƒë√£ ch·ªçn
                var.set(False)

    def update_map_info(self):
        """C·∫≠p nh·∫≠t th√¥ng tin v·ªÅ d·ªØ li·ªáu ƒë√£ t·∫£i"""
        self.map_info_text.delete("1.0", tk.END)
        
        if not self.city_data:
            self.map_info_text.insert(tk.END, "Ch∆∞a c√≥ d·ªØ li·ªáu th√†nh ph·ªë.\n")
            return
            
        self.map_info_text.insert(tk.END, f"üìä TH√îNG TIN D·ªÆ LI·ªÜU\n")
        self.map_info_text.insert(tk.END, "="*30 + "\n\n")
        self.map_info_text.insert(tk.END, f"üìÅ File: {self.file_cb.get()}\n")
        self.map_info_text.insert(tk.END, f"üèôÔ∏è S·ªë th√†nh ph·ªë: {len(self.city_data)}\n\n")
        
        self.map_info_text.insert(tk.END, "üìç DANH S√ÅCH TH√ÄNH PH·ªê:\n")
        self.map_info_text.insert(tk.END, "-"*30 + "\n")
        
        for i, (city, (lat, lon)) in enumerate(self.city_data.items(), 1):
            self.map_info_text.insert(tk.END, f"{i:2d}. {city:<20} ({lat:.4f}, {lon:.4f})\n")

    def create_map(self, show_route=True):
        """T·∫°o b·∫£n ƒë·ªì v·ªõi ·∫£nh v·ªá tinh"""
        if not self.city_data:
            return None

        # T√≠nh to√°n trung t√¢m b·∫£n ƒë·ªì
        lats = [coord[0] for coord in self.city_data.values()]
        lons = [coord[1] for coord in self.city_data.values()]
        center_lat = sum(lats) / len(lats)
        center_lon = sum(lons) / len(lons)

        # T·∫°o b·∫£n ƒë·ªì v·ªõi ·∫£nh v·ªá tinh
        m = folium.Map(
            location=[center_lat, center_lon],
            zoom_start=6,
            tiles=None
        )

        # Th√™m nhi·ªÅu l·ªõp b·∫£n ƒë·ªì
        folium.TileLayer('OpenStreetMap', name='B·∫£n ƒë·ªì ƒë∆∞·ªùng').add_to(m)
        folium.TileLayer(
            tiles='https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
            attr='Esri',
            name='·∫¢nh v·ªá tinh',
            overlay=False,
            control=True
        ).add_to(m)
        
        # Th√™m l·ªõp ·∫£nh v·ªá tinh v·ªõi nh√£n
        folium.TileLayer(
            tiles='https://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/MapServer/tile/{z}/{y}/{x}',
            attr='Esri',
            name='·∫¢nh v·ªá tinh + Nh√£n',
            overlay=True,
            control=True
        ).add_to(m)

        selected_cities = [city for city, var in self.city_vars.items() if var.get()] if self.city_vars else list(self.city_data.keys())
        start_city = self.start_city_cb.get()

        # Th√™m marker cho c√°c th√†nh ph·ªë
        for city in selected_cities:
            if city in self.city_data:
                lat, lon = self.city_data[city]
                
                # M√†u s·∫Øc kh√°c nhau cho th√†nh ph·ªë xu·∫•t ph√°t
                if city == start_city:
                    icon_color = 'red'
                    icon_icon = 'home'
                    popup_text = f"üö© XU·∫§T PH√ÅT: {city}"
                else:
                    icon_color = 'blue'
                    icon_icon = 'info-sign'
                    popup_text = f"üìç {city}"
                
                folium.Marker(
                    [lat, lon],
                    popup=folium.Popup(popup_text, max_width=200),
                    tooltip=city,
                    icon=folium.Icon(color=icon_color, icon=icon_icon)
                ).add_to(m)

        # V·∫Ω ƒë∆∞·ªùng ƒëi n·∫øu c√≥ l·ªô tr√¨nh
        if show_route and self.current_route and self.current_coords:
            # V·∫Ω ƒë∆∞·ªùng ƒëi ch√≠nh
            folium.PolyLine(
                self.current_coords,
                color='red',
                weight=4,
                opacity=0.8,
                popup='L·ªô tr√¨nh t·ªëi ∆∞u TSP'
            ).add_to(m)
            
            # Th√™m marker s·ªë th·ª© t·ª± cho t·ª´ng ƒëi·ªÉm trong l·ªô tr√¨nh
            for i, (city, coord) in enumerate(zip(self.current_route, self.current_coords)):
                if i < len(self.current_route) - 1:  # Kh√¥ng ƒë√°nh s·ªë cho ƒëi·ªÉm cu·ªëi (tr√πng v·ªõi ƒëi·ªÉm ƒë·∫ßu)
                    folium.CircleMarker(
                        coord,
                        radius=15,
                        popup=f"Th·ª© t·ª±: {i+1}",
                        color='white',
                        fill=True,
                        fillColor='red',
                        fillOpacity=0.8,
                        weight=2
                    ).add_to(m)
                    
                    # Th√™m s·ªë th·ª© t·ª±
                    folium.Marker(
                        coord,
                        icon=folium.DivIcon(
                            html=f'<div style="color: white; font-weight: bold; font-size: 12px; text-align: center; line-height: 15px;">{i+1}</div>',
                            icon_size=(15, 15),
                            icon_anchor=(7, 7)
                        )
                    ).add_to(m)

        # Th√™m ƒëi·ªÅu khi·ªÉn l·ªõp
        folium.LayerControl().add_to(m)
        
        # Th√™m plugin fullscreen
        plugins.Fullscreen().add_to(m)
        
        # Th√™m plugin ƒëo kho·∫£ng c√°ch
        plugins.MeasureControl().add_to(m)

        return m

    def show_cities_only(self):
        """Hi·ªÉn th·ªã ch·ªâ c√°c th√†nh ph·ªë ƒë√£ ch·ªçn tr√™n b·∫£n ƒë·ªì"""
        if not self.city_data:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng t·∫£i d·ªØ li·ªáu th√†nh ph·ªë tr∆∞·ªõc.")
            return

        selected_cities = [city for city, var in self.city_vars.items() if var.get()]
        if len(selected_cities) < 2:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t 2 th√†nh ph·ªë.")
            return

        try:
            # T·∫°o b·∫£n ƒë·ªì ch·ªâ hi·ªÉn th·ªã th√†nh ph·ªë
            m = self.create_map(show_route=False)
            if m is None:
                return

            # L∆∞u b·∫£n ƒë·ªì t·∫°m th·ªùi v√† m·ªü trong tr√¨nh duy·ªát
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.html')
            m.save(temp_file.name)
            webbrowser.open('file://' + temp_file.name)

            self.status_var.set(f"ƒê√£ hi·ªÉn th·ªã {len(selected_cities)} th√†nh ph·ªë tr√™n b·∫£n ƒë·ªì")
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o b·∫£n ƒë·ªì: {e}")

    def show_map(self):
        """Hi·ªÉn th·ªã b·∫£n ƒë·ªì v·ªõi l·ªô tr√¨nh (n·∫øu c√≥)"""
        if not self.current_route:
            self.show_cities_only()
            return

        try:
            # T·∫°o b·∫£n ƒë·ªì v·ªõi l·ªô tr√¨nh
            m = self.create_map(show_route=True)
            if m is None:
                return

            # L∆∞u b·∫£n ƒë·ªì t·∫°m th·ªùi v√† m·ªü trong tr√¨nh duy·ªát
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.html')
            m.save(temp_file.name)
            webbrowser.open('file://' + temp_file.name)

            self.status_var.set("ƒê√£ hi·ªÉn th·ªã l·ªô tr√¨nh TSP tr√™n b·∫£n ƒë·ªì v·ªá tinh")
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o b·∫£n ƒë·ªì: {e}")

    def start_process(self):
        # Kh√≥a n√∫t ch·∫°y trong l√∫c ch·∫°y
        self.btn_process.config(state="disabled")
        self.status_var.set("ƒêang ch·∫°y thu·∫≠t to√°n...")
        self.progress_var.set(0)
        self.result_text.delete("1.0", tk.END)
        
        # Reset l·ªô tr√¨nh t·ªët nh·∫•t
        self.best_route = []
        self.best_distance = float('inf')

        # Ch·∫°y thu·∫≠t to√°n tr√™n lu·ªìng ri√™ng ƒë·ªÉ kh√¥ng l√†m ƒë∆° giao di·ªán
        threading.Thread(target=self.process).start()

    def process(self):
        start_city = self.start_city_cb.get()
        selected_cities = [city for city, var in self.city_vars.items() if var.get()]

        if not start_city:
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn th√†nh ph·ªë b·∫Øt ƒë·∫ßu.")
            self.status_var.set("L·ªói: ch∆∞a ch·ªçn th√†nh ph·ªë b·∫Øt ƒë·∫ßu")
            self.btn_process.config(state="normal")
            return
            
        if len(selected_cities) < 3:
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn √≠t nh·∫•t 3 th√†nh ph·ªë (bao g·ªìm th√†nh ph·ªë xu·∫•t ph√°t).")
            self.status_var.set("L·ªói: ch∆∞a ch·ªçn ƒë·ªß th√†nh ph·ªë")
            self.btn_process.config(state="normal")
            return
        
        # S·∫Øp x·∫øp c√°c th√†nh ph·ªë theo longitude, sau ƒë√≥ l√† latitude
        selected_cities.sort(key=lambda city: (self.city_data[city][0], self.city_data[city][1]) if city in self.city_data else (float('inf'), float('inf')))

        # ƒê·∫£m b·∫£o th√†nh ph·ªë xu·∫•t ph√°t ·ªü ƒë·∫ßu m·∫£ng
        if start_city in selected_cities:
            selected_cities.remove(start_city)
        selected_cities.insert(0, start_city)

        try:
            generations = int(self.gen_entry.get())
            population = int(self.pop_entry.get())
            mutation_rate = float(self.mut_entry.get())
            if generations <= 0 or population <= 0 or not (0 <= mutation_rate <= 1):
                raise ValueError("Th√¥ng s·ªë kh√¥ng h·ª£p l·ªá")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Th√¥ng s·ªë kh√¥ng h·ª£p l·ªá: {e}")
            self.status_var.set("L·ªói: th√¥ng s·ªë kh√¥ng h·ª£p l·ªá")
            self.btn_process.config(state="normal")
            return

        valid_cities = []
        valid_city_names = []
        for city in selected_cities:
            if city in self.city_data:
                valid_cities.append(self.city_data[city])
                valid_city_names.append(city)

        if len(valid_cities) < 3:
            messagebox.showerror("L·ªói", "C·∫ßn √≠t nh·∫•t 3 th√†nh ph·ªë c√≥ t·ªça ƒë·ªô h·ª£p l·ªá.")
            self.status_var.set("L·ªói: thi·∫øu t·ªça ƒë·ªô h·ª£p l·ªá")
            self.btn_process.config(state="normal")
            return

        dist_matrix = src.TSP.compute_distance_matrix(valid_cities)

        try:
            # Ch·∫°y thu·∫≠t to√°n nhi·ªÅu l·∫ßn ƒë·ªÉ t√¨m l·ªô tr√¨nh t·ªët nh·∫•t
            num_runs = 5  # S·ªë l·∫ßn ch·∫°y ƒë·ªÉ t√¨m k·∫øt qu·∫£ t·ªët nh·∫•t
            best_result = None
            
            for run in range(num_runs):
                # C·∫≠p nh·∫≠t progress bar
                progress = (run / num_runs) * 100
                self.progress_var.set(progress)
                
                # Ch·∫°y thu·∫≠t to√°n
                current_result = src.GA.genetic_algorithm(
                    n_cities=len(valid_cities),
                    distances=dist_matrix,
                    population_size=population,
                    generations=generations,
                    mutation_rate=mutation_rate,
                    mutation_algorithm=self.mut_algo_cb.get(),
                    selection_algorithm=self.sel_algo_cb.get(),
                    crossover_algorithm=self.cross_algo_cb.get()
                )
                
                # Ki·ªÉm tra k·∫øt qu·∫£ h·ª£p l·ªá
                if 'route' not in current_result or 'distance' not in current_result:
                    continue
                    
                # So s√°nh v·ªõi k·∫øt qu·∫£ t·ªët nh·∫•t hi·ªán t·∫°i
                if (best_result is None or 
                    current_result['distance'] < best_result['distance']):
                    best_result = current_result.copy()
                    self.best_distance = current_result['distance']
                    self.best_route = current_result['route'].copy()
                
                # C·∫≠p nh·∫≠t status
                self.status_var.set(f"ƒêang ch·∫°y l·∫ßn {run+1}/{num_runs}... T·ªët nh·∫•t: {self.best_distance:.2f} km")
            
            # S·ª≠ d·ª•ng k·∫øt qu·∫£ t·ªët nh·∫•t
            if best_result is None:
                raise ValueError("Kh√¥ng c√≥ k·∫øt qu·∫£ h·ª£p l·ªá")
                
            result = best_result
            route = [i % len(valid_city_names) for i in result['route']]
            final_distance = result['distance']

            route_names_raw = [valid_city_names[i] for i in route]

            # ƒê∆∞a start_city v·ªÅ ƒë·∫ßu tuy·∫øn ƒë∆∞·ªùng
            start_city_name = valid_city_names[0]
            if start_city_name in route_names_raw:
                start_idx = route_names_raw.index(start_city_name)
                route_names = route_names_raw[start_idx:] + route_names_raw[:start_idx]
            else:
                route_names = route_names_raw
                
            # Lo·∫°i b·ªè c√°c th√†nh ph·ªë tr√πng l·∫∑p li√™n ti·∫øp trong l·ªô tr√¨nh
            unique_route = []
            for city in route_names:
                if not unique_route or unique_route[-1] != city:
                    unique_route.append(city)
            
            # ƒê·∫£m b·∫£o tuy·∫øn ƒë∆∞·ªùng k·∫øt th√∫c t·∫°i ƒëi·ªÉm xu·∫•t ph√°t
            if unique_route and unique_route[0] != unique_route[-1]:
                unique_route.append(unique_route[0])

            # L∆∞u l·ªô tr√¨nh v√† t·ªça ƒë·ªô ƒë·ªÉ hi·ªÉn th·ªã tr√™n b·∫£n ƒë·ªì
            self.current_route = unique_route
            self.current_coords = []
            for city in unique_route:
                if city in self.city_data:
                    self.current_coords.append(list(self.city_data[city]))

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            self.result_text.delete("1.0", tk.END)
            self.result_text.insert(tk.END, "üéØ K·∫æT QU·∫¢ THU·∫¨T TO√ÅN DI TRUY·ªÄN TSP\n")
            self.result_text.insert(tk.END, "="*50 + "\n\n")
            self.result_text.insert(tk.END, f"‚≠ê L·ªò TR√åNH T·ªêI ∆ØU NH·∫§T (T·ªët nh·∫•t trong {num_runs} l·∫ßn ch·∫°y):\n")
            self.result_text.insert(tk.END, f"   {' ‚Üí '.join(unique_route)}\n\n")
            self.result_text.insert(tk.END, f"üìè T·ªïng kho·∫£ng c√°ch t·ªëi ∆∞u: {final_distance:.2f} km\n")
            self.result_text.insert(tk.END, f"üèôÔ∏è S·ªë th√†nh ph·ªë: {len(unique_route)-1}\n")
            self.result_text.insert(tk.END, f"üîÑ S·ªë l·∫ßn ch·∫°y: {num_runs}\n")
            self.result_text.insert(tk.END, f"üß¨ S·ªë th·∫ø h·ªá m·ªói l·∫ßn: {generations}\n")
            self.result_text.insert(tk.END, f"üë• K√≠ch th∆∞·ªõc qu·∫ßn th·ªÉ: {population}\n")
            self.result_text.insert(tk.END, f"üîÑ T·ªâ l·ªá ƒë·ªôt bi·∫øn: {mutation_rate}\n\n")
            self.result_text.insert(tk.END, "üó∫Ô∏è Nh·∫•n 'Hi·ªÉn th·ªã b·∫£n ƒë·ªì' ƒë·ªÉ xem l·ªô tr√¨nh t·ªëi ∆∞u tr√™n ·∫£nh v·ªá tinh!\n")

            # C·∫≠p nh·∫≠t th√¥ng tin b·∫£n ƒë·ªì
            self.update_route_info()

            self.status_var.set("Ho√†n th√†nh! ƒê√£ t√¨m ƒë∆∞·ª£c l·ªô tr√¨nh t·ªëi ∆∞u.")
            self.progress_var.set(100)
            
        except Exception as e:
            import traceback
            self.result_text.delete("1.0", tk.END)
            self.result_text.insert(tk.END, f"‚ùå L·ªói khi ch·∫°y thu·∫≠t to√°n:\n{traceback.format_exc()}")
            self.status_var.set("L·ªói khi ch·∫°y thu·∫≠t to√°n")

        self.btn_process.config(state="normal")

    def update_route_info(self):
        """C·∫≠p nh·∫≠t th√¥ng tin l·ªô tr√¨nh tr√™n panel b·∫£n ƒë·ªì"""
        if not self.current_route:
            return
            
        self.map_info_text.delete("1.0", tk.END)
        
        self.map_info_text.insert(tk.END, "üéØ TH√îNG TIN L·ªò TR√åNH T·ªêI ∆ØU NH·∫§T\n")
        self.map_info_text.insert(tk.END, "="*40 + "\n\n")
        
        # Th√¥ng tin t·ªïng quan
        total_distance = 0
        self.map_info_text.insert(tk.END, f"üö© ƒêi·ªÉm xu·∫•t ph√°t: {self.current_route[0]}\n")
        self.map_info_text.insert(tk.END, f"üèÅ ƒêi·ªÉm k·∫øt th√∫c: {self.current_route[-1]}\n")
        self.map_info_text.insert(tk.END, f"üèôÔ∏è S·ªë th√†nh ph·ªë: {len(self.current_route)-1}\n")
        if hasattr(self, 'best_distance') and self.best_distance < float('inf'):
            self.map_info_text.insert(tk.END, f"üìè Kho·∫£ng c√°ch t·ªëi ∆∞u: {self.best_distance:.2f} km\n\n")
        else:
            self.map_info_text.insert(tk.END, "\n")
        
        # Chi ti·∫øt t·ª´ng ƒëo·∫°n ƒë∆∞·ªùng
        self.map_info_text.insert(tk.END, "üìç CHI TI·∫æT L·ªò TR√åNH T·ªêI ∆ØU:\n")
        self.map_info_text.insert(tk.END, "-"*35 + "\n")
        
        for i in range(len(self.current_route)-1):
            from_city = self.current_route[i]
            to_city = self.current_route[i+1]
            
            if from_city in self.city_data and to_city in self.city_data:
                from_coord = self.city_data[from_city]
                to_coord = self.city_data[to_city]
                
                # T√≠nh kho·∫£ng c√°ch gi·ªØa 2 th√†nh ph·ªë (c√¥ng th·ª©c Haversine)
                distance = self.calculate_distance(from_coord, to_coord)
                total_distance += distance
                
                self.map_info_text.insert(tk.END, f"{i+1:2d}. {from_city:<15} ‚Üí {to_city:<15} ({distance:.1f} km)\n")
        
        self.map_info_text.insert(tk.END, f"\nüìè T·ªïng kho·∫£ng c√°ch t√≠nh to√°n: {total_distance:.2f} km\n\n")
        
        # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng b·∫£n ƒë·ªì
        self.map_info_text.insert(tk.END, "üó∫Ô∏è C√ÅCH S·ª¨ D·ª§NG B·∫¢N ƒê·ªí:\n")
        self.map_info_text.insert(tk.END, "-"*25 + "\n")
        self.map_info_text.insert(tk.END, "‚Ä¢ Nh·∫•n 'Hi·ªÉn th·ªã b·∫£n ƒë·ªì' ƒë·ªÉ xem l·ªô tr√¨nh t·ªëi ∆∞u\n")
        self.map_info_text.insert(tk.END, "‚Ä¢ B·∫£n ƒë·ªì s·∫Ω m·ªü trong tr√¨nh duy·ªát web\n")
        self.map_info_text.insert(tk.END, "‚Ä¢ C√≥ th·ªÉ chuy·ªÉn ƒë·ªïi gi·ªØa ·∫£nh v·ªá tinh v√† b·∫£n ƒë·ªì ƒë∆∞·ªùng\n")
        self.map_info_text.insert(tk.END, "‚Ä¢ S·ª≠ d·ª•ng n√∫t zoom ƒë·ªÉ ph√≥ng to/thu nh·ªè\n")
        self.map_info_text.insert(tk.END, "‚Ä¢ Click v√†o marker ƒë·ªÉ xem th√¥ng tin th√†nh ph·ªë\n")
        self.map_info_text.insert(tk.END, "‚Ä¢ ƒê∆∞·ªùng m√†u ƒë·ªè hi·ªÉn th·ªã l·ªô tr√¨nh t·ªëi ∆∞u nh·∫•t\n")
        self.map_info_text.insert(tk.END, "‚Ä¢ S·ªë tr√™n marker hi·ªÉn th·ªã th·ª© t·ª± ƒëi qua\n")

    def calculate_distance(self, coord1, coord2):
        """T√≠nh kho·∫£ng c√°ch gi·ªØa 2 t·ªça ƒë·ªô (Haversine formula)"""
        import math
        
        lat1, lon1 = coord1
        lat2, lon2 = coord2
        
        # Chuy·ªÉn ƒë·ªïi sang radian
        lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])
        
        # Haversine formula
        dlat = lat2 - lat1
        dlon = lon2 - lon1
        a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
        c = 2 * math.asin(math.sqrt(a))
        
        # B√°n k√≠nh Tr√°i ƒê·∫•t (km)
        r = 6371
        
        return c * r

if __name__ == "__main__":
    try:
        app = TSPGUI()
        app.mainloop()
    except ImportError as e:
        print("L·ªói: Thi·∫øu th∆∞ vi·ªán c·∫ßn thi·∫øt!")
        print("Vui l√≤ng c√†i ƒë·∫∑t: pip install folium")
        print(f"Chi ti·∫øt l·ªói: {e}")